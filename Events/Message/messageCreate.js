// –ø—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º messageCreate
const { Configuration, OpenAIApi } = require("openai");
const { Client, EmbedBuilder, Message } = require("discord.js");
const fs = require("fs");
const fetch = require("node-fetch");
const conf = JSON.parse(fs.readFileSync("./config.json"));

const configuration = new Configuration({
  apiKey: conf.OpenAI_KEY,
  organization: conf.OpenAI_ORG,
});

const openai = new OpenAIApi(configuration);
const userCooldowns = {}; // –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è apenai api

module.exports = {
  name: "messageCreate",
  on: true,
  /**
   *
   * @param {Message} message
   * @param {Client} client
   *
   */
  async execute(message, client) {
    try {
      if (message.content.startsWith("!")) {
        if (message.author.bot) return;
        const userId = message.author.id;
        const now = Date.now();
        if (
          !conf.Developers.includes(message.author.id) == true &&
          !(message.channel.id === conf.MyChannel) &&
          userCooldowns.hasOwnProperty(userId) &&
          userCooldowns[userId] + 60000 > now // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ —É–∂–µ –º–∏–Ω—É—Ç–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        ) {
          const remainingTime = userCooldowns[userId] + 60000 - now;
          const remainingSeconds = Math.ceil(remainingTime / 1000);
          const reply = await message.reply({
            content: `–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ ${remainingSeconds} —Å–µ–∫—É–Ω–¥(—ã).`,
            ephemeral: true,
          });
          setTimeout(() => {
            reply.delete();
          }, remainingTime);
          return;
        }
        userCooldowns[userId] = now;

        let conversationLog = [
          {
            role: "system",
            content: "You are a frendly chatbot.", // –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç—É
          },
        ];

        await message.channel.sendTyping();

        let prevMessages = await message.channel.messages.fetch({ limit: 15 });
        prevMessages.reverse(); // –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 15 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –∏—Ö —Ä–µ–≤–µ—Ä—Å

        prevMessages.forEach((msg) => {
          if (!message.content.startsWith("!")) return;
          if (msg.author.id !== client.user.id && message.author.bot) return;
          if (msg.author.id !== message.author.id) return;

          conversationLog.push({
            role: "user",
            content: msg.content, // –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö 15 —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É –≤ "–ø–∞–º—è—Ç—å"
          });
        });

        const result = await openai
          .createChatCompletion({
            model: "gpt-3.5-turbo", // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –±–æ—Ç–∞ –∏–∑ openai api
            messages: conversationLog,
            max_tokens: 1500, // –ª–∏–º–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–Ω–∞–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è. —Å–∏–º–≤–æ–ª—ã –ø–∏—à—É—Ç—Å—è –≤–ø–ª–æ—Ç—å –¥–æ 6000, –±–æ–ª—å—à–µ –Ω–µ –¥–æ–≤–æ–¥–∏–ª–æ—Å—å —É–≤–∏–¥–µ—Ç—å
          })
          .catch((error) => {
            console.log(`OPENAI ERR: ${error}`);
          });
        let useReply = true;
        const responseText = result.data.choices[0].message.content;
        console.log(responseText.length); // –≤—ã–≤–æ–¥ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–±–æ—Ç–æ–º
        if (responseText.length > 2000) {
          // –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∏—Å–∫–æ–≥–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Ä–∞–≤–Ω–∞ 2000
          const responseArray = responseText.match(/.{1,2000}/g);
          responseArray.forEach((responseArray) => {
            if (useReply) {
              message.reply(responseArray);
              useReply = !useReply;
            } else {
              message.channel.send(responseArray);
            }
          });
        } else {
          message.reply(result.data.choices[0].message).then((sentMessage) => {
            sentMessage.react("üëç");
            sentMessage.react("üëé");
          });
        }
        return;
      }
    } catch (error) {
      console.log(`ERR: ${error}`);
      message.reply("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"); // 99% –æ—à–∏–±–æ–∫ error 429
      return;
    }
    /////////////////////////////////////////////////////////////////////////////////////////
    ///                                     KISS                                          ///
    /////////////////////////////////////////////////////////////////////////////////////////
    try {
      if (message.content.toLowerCase().startsWith("a!kiss")) {
        const url = `http://api.giphy.com/v1/gifs/search?q=${"kiss"}&api_key=${
          conf.GIPHY_KEY
        }&rating=r`;
        const member1 = message.member.displayName;
        const member2 = message.mentions.members.first().displayName;
        if (message.member.id == message.mentions.members.first().id) {
          message.channel.send("***–ü–æ—Ü–µ–ª–æ–≤–∞–ª... –°–µ–±—è?***");
          return;
        }
        const res = await fetch(url); // –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ giphy.com, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –≥–∏—Ñ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ—ë –¥–ª—è –¥–∏—Å–∫–æ—Ä–¥–∞
        const json = await res.json();
        const randomIndex = Math.floor(Math.random() * json.data.length);
        const randomColor = Math.floor(Math.random() * 16777215).toString(16);
        const embed = new EmbedBuilder()
          .setTitle(`**${member1}** *–ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)* **${member2}**`)
          .setImage(json.data[randomIndex].images.original.url)
          .setColor(randomColor)
          .setFooter({
            text: "Powered By Giphy.com",
            url: "https://i.imgur.com/kXy7KSf.png",
          });

        message.channel.send({
          embeds: [embed],
        });
        return;
      }
      /////////////////////////////////////////////////////////////////////////////////////////
      ///                                     MIND                                          ///
      /////////////////////////////////////////////////////////////////////////////////////////
      if (message.content.includes(client.user.id)) {
        // –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –º–∞—Å—Å–∏–≤–∞
        const answers = ["–î–∞! –≠—Ç–æ —è!"];
        const randomIndex = Math.floor(Math.random() * answers.length);
        message.reply(`**${answers[randomIndex]}**`);
      }
    } catch (error) {
      console.log(error);
    }
  },
};
